---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0,viewport-fit=cover"
		/>
		<link rel="icon" type="image/svg+xml" href="/pussy.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		{
			import.meta.env.HEAD_SCRIPTS ? (
				<Fragment set:html={import.meta.env.HEAD_SCRIPTS} />
			) : null
		}
	</head>
	<body>
		<slot />

		<div class="sakana-box"></div>
	</body>
</html>
<!-- what is style is:global -->
<style is:global>
	:root {
		--c-bg: #fbfbfb;
		--c-fg: #444444;
		--c-scroll: #d9d9d9;
		--c-scroll-hover: #bbbbbb;
		scrollbar-color: var(--c-scrollbar) var(--c-bg);
	}

	html {
		font-family: system-ui, sans-serif;
		background-color: var(--c-bg);
		color: var(--c-fg);
	}

	html.dark {
		--c-bg: #212129;
		--c-fg: #ddddf0;
		--c-scroll: #333333;
		--c-scroll-hover: #555555;
	}

	main {
		max-width: 70ch;
		margin: 0 auto;
		padding: 6rem 2rem 4rem;
	}

	::-webkit-scrollbar {
		width: 6px;
		height: 6px;
	}
	::-webkit-scrollbar-thumb {
		background-color: var(--c-scroll);
		border-radius: 4px;
	}
	::-webkit-scrollbar-thumb:hover {
		background-color: var(--c-scroll-hover);
	}
	::-webkit-scrollbar-track {
		background-color: var(--c-bg);
	}
	#circle {
		position: absolute;
		border-radius: 50%;
		background-color: dodgerblue;
		opacity: 0.5;
		transform: translate(-50%, -50%);
		pointer-events: none; /* 防止圆圈被点击 */
	}
	.sakana-box {
			height: 10px !important;
			position: fixed !important;
			bottom: 5%;
			right: -9%;
		}

		@media screen and (max-width: 1000px) {
			.sakana-box {
				display: none;
			}
		}
</style>
<script>
	const initTheme = () => {
		const darkSchema =
			window.matchMedia &&
			window.matchMedia("(prefers-color-scheme: dark)").matches;
		const storageTheme = localStorage.getItem("theme");
		if (storageTheme) {
			document.documentElement.classList.toggle(
				"dark",
				storageTheme === "dark"
			);
		} else {
			document.documentElement.classList.toggle("dark", darkSchema);
		}
	};

	initTheme();
	import Sakana from "sakana";
	Sakana.init({
		el: ".sakana-box", // 启动元素 node 或 选择器
		scale: 0.5, // 缩放倍数
		canSwitchCharacter: true, // 允许换角色
	});

	// 监听鼠标点击事件
	document.addEventListener("click", function (event: MouseEvent) {
		const x: number = event.clientX;
		// 获取鼠标点击位置的X坐标
		const y: number = event.clientY;
		console.log(x, y);
		// 获取鼠标点击位置的Y坐标

		const circle: HTMLDivElement = document.createElement("div");
		// 创建圆圈元素
		circle.setAttribute("id", "circle");
		document.body.appendChild(circle);
		// 添加到页面

		// 设置初始样式
		circle.style.top = `${y}px`;
		circle.style.left = `${x}px`;
		circle.style.width = "10px";
		circle.style.height = "10px";

		// 定义动画函数
		const animate = () => {
			const radius: number = parseInt(circle.style.width) + 2; // 增加圆的半径
			circle.style.width = `${radius}px`;
			circle.style.height = `${radius}px`;
			circle.style.opacity = `${1 - radius / 100}`;
			// 透明度随半径增大而减小

			if (radius < 100) {
				requestAnimationFrame(animate); // 继续执行动画
			} else {
				document.body.removeChild(circle); // 动画完成后删除圆圈元素
			}
		};

		animate(); // 启动动画
	});
</script>
